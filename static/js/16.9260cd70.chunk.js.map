{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","process","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","TokenPairImage","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","valNumber","fullBalanceNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","title","disabled","isFinite","eq","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","lpPrice","useLpTokenPrice","handleStake","amount","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","times","unit","prefix","some","item","pathname","includes","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","toNumber","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","lpContract","useERC20","onApprove","useApprove","handleApprove","console","error","textTransform","pr","lpSymbol","mt","UnlockButton","ApyButton","apr","ApyCalculatorModal","linkLabel","tokenPrice","linkHref","isFarm","onPresentApyModal","event","stopPropagation","ml","AccentGradient","keyframes","StyledCardAccent","primaryBright","secondary","FCard","card","background","isPromotedFarm","radii","Divider","cardBorder","ExpandingWrapper","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","farmAPR","liquidityUrlPathParts","address","BASE_ADD_LIQUIDITY_URL","isCommunity","display","CardActionsContainer","getBscScanAddressUrl","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","collapseAnimation","css","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","isArchived","isInactive","usePollFarmsData","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","Page","checked","Select","options","option","marginLeft","SearchInput","target","sort","b","exact","renderContent","src","alt"],"mappings":"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","file":"static/js/16.9260cd70.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/hooks'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport Balance from 'components/Balance'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n          setPendingTx(false)\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      tokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  liquidity?: BigNumber\n}\n\nconst AccentGradient = keyframes`  \n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: ${({ theme }) => `linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary})`};\n  background-size: 400% 400%;\n  animation: ${AccentGradient} 2s linear infinite;\n  border-radius: 32px;\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  bottom: -3px;\n  left: -1px;\n  z-index: -1;\n`\n\nconst FCard = styled.div<{ isPromotedFarm: boolean }>`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme, isPromotedFarm }) => (isPromotedFarm ? '31px' : theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const farmAPR = farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <FCard isPromotedFarm={isPromotedFarm}>\n      {isPromotedFarm && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={farm.isCommunity}\n        token={farm.token}\n        quoteToken={farm.quoteToken}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={farm.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={getBscScanAddressUrl(farm.lpAddresses[process.env.REACT_APP_CHAIN_ID])}\n          infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport TokenPairImage from 'components/TokenPairImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <div>\n      {t('The multiplier represents the amount of CAKE rewards each farm gets.')}\n      <br />\n      <br />\n      {t('For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.')}\n    </div>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n","import React, { useState } from 'react'\nimport { Button, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\n\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport UnlockButton from 'components/UnlockButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice } from 'state/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApprove } from 'hooks/useApprove'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = getBscScanAddressUrl(lpAddress)\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap-libs/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const apr = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}