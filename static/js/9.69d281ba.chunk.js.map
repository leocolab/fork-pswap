{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","hooks/useIntersectionObserver.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/PredictionPromotionCard.tsx","views/Home/components/WinCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","../node_modules/lodash/max.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","Block","styled","div","CakeHarvestBalance","farmsWithBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","lineHeight","gt","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","toastError","useToast","masterChefContract","useMasterchef","balancesWithValue","filter","balanceType","harvestAllFarms","useCallback","farmWithBalance","harvest","message","scale","mb","src","alt","width","height","id","disabled","onClick","count","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","useIntersectionObserver","observerRef","useRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","IntersectionObserver","entry","rootMargin","threshold","observe","current","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","useMemo","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","getFarmApr","poolWeight","lpAddresses","ChainId","MAINNET","maxApr","max","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","variant","ref","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","symbol","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","earn","InPools","StyledPredictionCard","sm","md","StyledHeaderText","Text","StyledText","StyledBalance","Balance","StyledSkeleton","Skeleton","StyledBNBSoFarText","PredictionPromotionCard","slowRefresh","loadData","setLoadData","bnbBusdPrice","usePriceBnbBusd","bnbWon","setBnbWon","bnbWonInUsd","setBnbWonInUsd","getTotalWon","totalWon","fetchMarketData","bnbWonInUsdText","toString","amount","over","bnbSoFar","bold","prefix","href","px","alignItems","WinCard","Hero","Cards","BaseLayout","CTACards","Home","Page","as","FarmStakingCard","FetchStatus","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","setBalance","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","setLastUpdated","web3","useWeb3","eth","getBalance","walletBalance","refresh","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","prev","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","props","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/9.69d281ba.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { FarmWithBalance } from 'hooks/useFarmsWithBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface CakeHarvestBalanceProps {\n  farmsWithBalance: FarmWithBalance[]\n}\n\nconst CakeHarvestBalance: React.FC<CakeHarvestBalanceProps> = ({ farmsWithBalance }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const earningsSum = farmsWithBalance.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning.balance)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvest } from 'utils/callHelpers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.gt(0))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvest(masterChefContract, farmWithBalance.pid, account)\n      } catch (error) {\n        toastError(t('Error'), error?.message)\n      }\n    }\n    setPendingTx(false)\n  }, [account, balancesWithValue, masterChefContract, toastError, t])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('CAKE to Harvest')}:</Label>\n          <CakeHarvestBalance farmsWithBalance={balancesWithValue} />\n        </Block>\n        <Block>\n          <Label>{t('CAKE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting CAKE')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Cake Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={20} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      const intersectionObserver = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserver.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap-libs/sdk'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    if (isIntersecting) {\n      fetchFarmData()\n    }\n  }, [dispatch, setIsFetchingFarmData, isIntersecting])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          return getFarmApr(\n            new BigNumber(farm.poolWeight),\n            cakePrice,\n            totalLiquidity,\n            farm.lpAddresses[ChainId.MAINNET],\n          )\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <>\n                <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n                <div ref={observerRef} />\n              </>\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n// Always include CAKE\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\nconst EarnAssetCard = () => {\n  const { t } = useTranslation()\n  const assetText = t('Earn %assets% in Pools', { assets })\n  const [earn, InPools] = assetText.split(assets)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earn}\n          </Heading>\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InPools}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, ArrowForwardIcon, Link, Button, Text, Skeleton, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getTotalWon } from 'state/predictions/helpers'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport Balance from '../../../components/Balance'\n\nconst StyledPredictionCard = styled(Card)`\n  background-image: url('/images/prediction_promotion.png');\n  background-repeat: no-repeat;\n  background-position: bottom right;\n  background-size: 50%;\n  min-height: 376px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    background-size: 45%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    background-size: 50%;\n  }\n`\n\nconst StyledHeaderText = styled(Text)`\n  font-size: 28px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 40px;\n  }\n`\n\nconst StyledText = styled(Text)`\n  font-size: 36px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 50px;\n  }\n`\n\nconst StyledBalance = styled(Balance)`\n  font-size: 36px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 50px;\n  }\n`\n\nconst StyledSkeleton = styled(Skeleton)`\n  height: 40px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    height: 55px;\n  }\n`\n\nconst StyledBNBSoFarText = styled(Text)`\n  font-size: 22px;\n  line-height: 1.1;\n  font-weight: 600;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 24px;\n  }\n`\n\nconst PredictionPromotionCard = () => {\n  const { t } = useTranslation()\n  const { slowRefresh } = useRefresh()\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const [loadData, setLoadData] = useState(false)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const [bnbWon, setBnbWon] = useState(0)\n  const [bnbWonInUsd, setBnbWonInUsd] = useState(0)\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    if (isIntersecting) {\n      setLoadData(true)\n    }\n  }, [isIntersecting])\n\n  useEffect(() => {\n    const fetchMarketData = async () => {\n      const totalWon = await getTotalWon()\n      setBnbWon(totalWon)\n    }\n\n    if (loadData) {\n      fetchMarketData()\n    }\n  }, [slowRefresh, loadData])\n\n  useEffect(() => {\n    if (bnbBusdPrice.gt(0) && bnbWon > 0) {\n      setBnbWonInUsd(bnbBusdPrice.times(bnbWon).toNumber())\n    }\n  }, [bnbBusdPrice, bnbWon])\n\n  const bnbWonInUsdText = bnbWonInUsd ? bnbWonInUsd.toString() : '-'\n  const wonBNBText = t('Over %amount% in BNB won so far', { amount: bnbWonInUsdText })\n  const [over, bnbSoFar] = wonBNBText.split(bnbWonInUsdText)\n\n  return (\n    <StyledPredictionCard>\n      <CardBody>\n        <StyledHeaderText mb=\"24px\">{t('Predictions Now Live')}</StyledHeaderText>\n        <StyledText bold color=\"#7645d9\">\n          {over}\n        </StyledText>\n        {bnbWonInUsd ? (\n          <StyledBalance mb=\"24px\" color=\"#7645d9\" bold prefix=\"$\" decimals={0} value={bnbWonInUsd} />\n        ) : (\n          <>\n            <StyledSkeleton animation=\"pulse\" variant=\"rect\" mb=\"24px\" width={180} />\n            <div ref={observerRef} />\n          </>\n        )}\n        <StyledBNBSoFarText bold mb=\"24px\">\n          {bnbSoFar}\n        </StyledBNBSoFarText>\n        <Text color=\"textSubtle\" mb=\"24px\">\n          *{t('Beta Version')}\n        </Text>\n        <Link href=\"https://pancakeswap.finance/prediction\" id=\"homepage-prediction-cta\">\n          <Button px={['14px', null, null, null, '20px']}>\n            <Flex alignItems=\"center\">\n              <Text color=\"white\" bold fontSize=\"16px\">\n                {t('Try Now')}\n              </Text>\n              <ArrowForwardIcon color=\"white\" />\n            </Flex>\n          </Button>\n        </Link>\n      </CardBody>\n    </StyledPredictionCard>\n  )\n}\n\nexport default PredictionPromotionCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {t('Lottery')} V2\n          </Heading>\n          <CardMidContent color=\"#7645d9\">{t('Coming Soon')}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\" />\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport PredictionPromotionCard from './components/PredictionPromotionCard'\nimport WinCard from './components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    background : white;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          {t('PancakeSwap')}\n        </Heading>\n        <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <PredictionPromotionCard />\n        </Cards>\n        <CTACards>\n          <EarnAPRCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}